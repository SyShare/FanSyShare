apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'walle'
apply plugin: 'com.jakewharton.hugo'

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}

android {

    signingConfigs {
        config {
            keyAlias 'keystore'
            keyPassword '123456'
            storeFile file('keystore.jks')
            storePassword '123456'
        }
    }

    compileSdkVersion depends.compileSdkVersion
    defaultConfig {
        applicationId "sy.com.initproject"
        minSdkVersion depends.minSdkVersion
        targetSdkVersion depends.targetSdkVersion
        versionCode 1
        versionName APP_VERSION
        buildConfigField "boolean", "LEO_DEBUG", "true"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        signingConfig signingConfigs.config
        multiDexEnabled true
    }

    dataBinding {
        enabled = true
    }

    compileOptions {//对lambda的支持
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {

        debug {
            debuggable true
            minifyEnabled false
            buildConfigField "boolean", "LEO_DEBUG", RELEASE_LEO_DEBUG
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            debuggable false
            signingConfig signingConfigs.config
            minifyEnabled true
            buildConfigField "boolean", "LEO_DEBUG", RELEASE_LEO_DEBUG
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    //工具库
    implementation project(':base')
    implementation project(':core')
    implementation project(':logger')
    implementation project(':util')
    implementation project(':lib-http')
    implementation project(':lib-player')

    //依赖库
    implementation depends.baseadapter()
    implementation depends.cardview_v7()

    implementation 'com.github.chrisbanes.photoview:library:1.2.4'
    implementation('com.alibaba.android:vlayout:1.2.8@aar') {
        transitive = false
    }
    implementation depends.eventbus()

}

/**
 * 改变包路径
 * @param type
 */
def changeApkPath(String type, String buldType) {
    def timeNow = getDate()
    android.applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def newName

                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def parentDir = "D:/tomcat/apache-tomcat-8.5.33-windows-x64/apache-tomcat-8.5.33/webapps/jenkins/apk"
                    println "applicationVariants buildType:" + variant.buildType.name
                    if ("true".equals(IS_JENKINS)) {
                        newName = 'yj-android-v' +
                                APP_VERSION + '-' + variant.productFlavors[0].name + timeNow + '-' + variant.buildType.name + '.apk'
                    } else {
                        if (variant.buildType.name.equals('debug')) {
                            newName = "yj-android-v${APP_VERSION}-debug.apk"
                        } else {
                            newName = 'yj-android-v' +
                                    APP_VERSION + '-' + variant.productFlavors[0].name + timeNow + '-' + variant.buildType.name + '.apk'
                        }
                    }
                    output.outputFile = new File(parentDir, newName)
                }
            }
        }
}
/**
 * 编译测试任务
 */
task buildPublish(dependsOn: ['assembleRelease', 'generatepureDebugJavadoc']) {
    dependsOn {
        changeApkPath("publish", "release")
    }
}

/**
 * 编译Beta任务
 */
task buildBeta(dependsOn: 'assembleDebug') {
    dependsOn {
        changeApkPath("beta", "beta")
    }
}
